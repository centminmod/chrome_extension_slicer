name: Create or Update Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Get version from manifest.json
        run: echo "EXTENSION_VERSION=$(node -p \"require('./manifest.json').version\")" >> $GITHUB_ENV

      - name: Check if release exists
        id: check_release
        run: |
          RELEASE_ID=$(curl --silent --show-error --fail --location --header "Accept: application/vnd.github+json" "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/v${{ env.EXTENSION_VERSION }}" --header "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" | jq ".id")
          echo "RELEASE_ID=${RELEASE_ID}" >> $GITHUB_ENV

      - name: Debug RELEASE_ID
        run: |
          echo "RELEASE_ID: ${{ env.RELEASE_ID }}"

      - name: Create release
        if: "steps.check_release.outputs.release_id == 'null'"
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.EXTENSION_VERSION }}
          release_name: Release ${{ env.EXTENSION_VERSION }}
          body: "New release: ${{ env.EXTENSION_VERSION }}"
          draft: false
          prerelease: false
      
      - name: Update release
        if: "steps.check_release.outputs.release_id != 'null'"
        run: |
          curl --request PATCH --header "Accept: application/vnd.github+json" --header "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" --url "https://api.github.com/repos/\${GITHUB_REPOSITORY}/releases/${{ env.RELEASE_ID }}" --data "{\"name\":\"Release ${{ env.EXTENSION_VERSION }}\", \"body\":\"Updated release: ${{ env.EXTENSION_VERSION }}\"}"

      - name: Zip extension
        run: |
          mkdir dist
          zip -r dist/chrome_extension_slicer_v${{ env.EXTENSION_VERSION }}.zip . -x "node_modules/*" ".git/*" ".github/*" ".gitignore" "package*.json" "README.md" "LICENSE" "screenshots/*"

      - name: Debug upload URLs
        run: |
          echo "Create release upload URL: ${{ steps.create_release.outputs.upload_url }}"
          echo "Check release upload URL: ${{ steps.check_release.outputs.upload_url }}"

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url || steps.check_release.outputs.upload_url }}
          asset_path: dist/chrome_extension_slicer_v${{ env.EXTENSION_VERSION }}.zip
          asset_name: chrome_extension_slicer_v${{ env.EXTENSION_VERSION }}.zip
          asset_content_type: application/zip
